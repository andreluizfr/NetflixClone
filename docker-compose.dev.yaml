version: "3"

services:

  api-gateway:
    container_name: api-gateway-container
    build: ./api-gateway
    ports:
      - 5050:5050
    environment:
      - JAVA_OPTS="-Ddebug -Xmx128m"
    volumes:
      - .m2:/root/.m2
    depends_on:
      user-service:
        condition: service_healthy
      media-service:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.16'
          memory: 324M
        reservations:
          cpus: '0.04'
          memory: 128M

  content-manager-service:
    container_name: content-manager-service-container
    build: ./content-manager-service
    ports:
      - 5151:5151
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.16'
          memory: 324M
        reservations:
          cpus: '0.04'
          memory: 128M

  user-service:
    container_name: user-service-container
    build: ./user-service
    ports:
      - 5252:5252
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - JAVA_OPTS="-Ddebug -Xmx128m"
    volumes:
      - .m2:/root/.m2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5252/health"]
      interval: 10s
      timeout: 5s
      retries: 1000
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.2'
          memory: 480M
        reservations:
          cpus: '0.08'
          memory: 240M

  media-service:
    container_name: media-service-container
    build: ./media-service
    ports:
      - 5353:5353
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - JAVA_OPTS="-Ddebug -Xmx128m"
    volumes:
      - .m2:/root/.m2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5353/health"]
      interval: 10s
      timeout: 5s
      retries: 1000
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.2'
          memory: 480M
        reservations:
          cpus: '0.04'
          memory: 240M
  
  messaging-service:
    container_name: messaging-service-container
    build: ./messaging-service
    ports:
      - 5454:5454
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - JAVA_OPTS="-Ddebug -Xmx64m"
    volumes:
      - .m2:/root/.m2
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.16'
          memory: 324M
        reservations:
          cpus: '0.04'
          memory: 128M

  payment-service:
    container_name: payment-service-container
    build: ./payment-service
    ports:
      - 5555:5555
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.12'
          memory: 256M
        reservations:
          cpus: '0.02'
          memory: 128M

  recommendation-service:
    container_name: recommendation-service-container
    build: ./recommendation-service
    ports:
      - 5656:5656
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.12'
          memory: 256M
        reservations:
          cpus: '0.02'
          memory: 128M

  web-app:
    container_name: web-app-container
    build: ./web-app
    ports:
      - 8080:8080
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.16'
          memory: 256M
        reservations:
          cpus: '0.04'
          memory: 128M
  
  web-cms-app:
    container_name: web-cms-app-container
    build: ./web-cms-app
    ports:
      - 80:80
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.16'
          memory: 256M
        reservations:
          cpus: '0.04'
          memory: 128M
  
  postgres:
    container_name: postgres-container
    image: postgres:15.0
    restart: always
    tty: true
    volumes:
      - .pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=netflixClone
    ports:
      - 5433:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d netflixClone"]
      interval: 10s
      timeout: 5s
      retries: 100
    deploy:
      resources:
        limits:
          cpus: '0.08'
          memory: 128M
        reservations:
          cpus: '0.01'
          memory: 32M

  redis:
    container_name: redis-container
    hostname: redis
    image: redis:7.2
    command: redis-server --requirepass netflixredis6379
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 100
    deploy:
      resources:
        limits:
          cpus: '0.04'
          memory: 128M
        reservations:
          cpus: '0.01'
          memory: 32M

  #kafka on kraft mode
  kafka:
    image: 'bitnami/kafka:3.3.1'
    container_name: kafka-container
    ports:
      - 9092:9092
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID=r4zt_wrqTRuT7W2NJsB_GA
    volumes:
      - .kafkadata:/bitnami/kafka
    healthcheck:
      test: "kafka-cluster.sh cluster-id --bootstrap-server localhost:9092 || exit 1"
      timeout: 5s
      interval: 10s
      retries: 1000
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 240s

  kafka-ui:
    container_name: kafka-ui
    image: 'provectuslabs/kafka-ui:latest'
    ports:
      - 9999:8080
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_NAME=r4zt_wrqTRuT7W2NJsB_GA
    depends_on:
      kafka:
        condition: service_healthy
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.12'
          memory: 256M
        reservations:
          cpus: '0.02'
          memory: 128M

  eureka:
    container_name: eureka-container
    hostname: eureka
    image: springcloud/eureka
    ports:
      - 8761:8761
    environment:
      - SPRING_PROFILE_ACTIVE=peer1
      - EUREKA_INSTANCE_HOSTNAME=eureka
      - EUREKA_INSTANCE_NON_SECURE_PORT=8761
      - EUREKA_CLIENT_REGISTER-WITH-EUREKA=false
      - EUREKA_CLIENT_FETCH-REGISTRY=false
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 100
    deploy:
      resources:
        limits:
          cpus: '0.24'
          memory: 324M
        reservations:
          cpus: '0.02'
          memory: 128M

  dynamodb:
    container_name: dynamodb-container
    image: amazon/dynamodb-local:latest
    ports:
      - 8000:8000
    volumes:
      - "./docker/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    environment:
      - AWS_ACCESS_KEY_ID="dev"
      - AWS_SECRET_ACCESS_KEY="dev123"
      - AWS_DEFAULT_REGION="us-east-1"
  
  dynamodb-admin:
    image: aaronshaf/dynamodb-admin
    ports:
      - 8001:8001
    environment:
      DYNAMO_ENDPOINT: "http://dynamodb:8000"
      AWS_ACCESS_KEY_ID: "dev"
      AWS_SECRET_ACCESS_KEY: "dev123"
      AWS_REGION: "us-east-1"
    depends_on:
      - dynamodb