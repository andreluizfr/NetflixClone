//  ############# Redirecionamento de página ##################

//  ############# Manipulação de dados na view ##################

//  ############# Manipulação de requisição ##################

//  ############# Renderização do conteúdo ##################


import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

import { Helmet } from 'react-helmet-async';


 <ToastContainer
    autoClose={2000} //mesmo tempo do redirecionamento feito pelo serviço do login
    newestOnTop={true}
    pauseOnFocusLoss={false}
    draggable={false}
    pauseOnHover={false}
    hideProgressBar={true}
/>


toast.error(
    loginResult.error.httpStatusCode+": "+loginResult.error.message, {
    position: "top-center",
    theme: "dark"
});

/signup/
/signup/planform
/signup/registration
/signup/paymentPicker
/signup/informations
/signup/payment


@DependentScoped 
- default

@RequestScoped
- tempo de vida dura apenas na requisição

@SessionScoped
- tempo de vida enquanto tiver sessao do usuario

@ApplicationScoped
- enquanto a aplicação estiver rodando, compartilhado entre os usuarios do sistema

@ConversationScoped
- durante um tempo definido pelo programador atraves de begin() e end()


psqlException: Error value too long for type character


Tabela (MediaPreview)
InitialContentsConfiguration {
	id

	OneToOne relation
	Media previewMedia;
	
	ManyToOne relation
	Playlist <Set> playlists;

	created_at
}

<div className="Row-1">
                            <span className='Relevance'>100% relevante</span>
                            <span>{media.releaseYear}</span>
                            {(isMovie(media) && (media as Movie).movieSeries) &&
                                <span>Filme {(media as Movie).sequenceNumber}</span>
                            }
                            {isTvShow(media) &&
                                <span>{(media as TvShow).numberOfSeasons} Temporadas</span>
                            }
                            {isAnime(media) &&
                                <span>{(media as Anime).numberOfSeasons} Temporadas</span>
                            }
                        </div>

                        <div className="Row-2">
                            <p className='Description'>
                                {media.descriptions}
                            </p>
                        </div>

                        <div className="Row-3">
                            {isMovie(media) &&
                                <i className='ActorsActresses'>{(media as Movie).actorsActresses.join(", ")}</i>
                            }
                            {isTvShow(media) &&
                                <i className='ActorsActresses'>{(media as TvShow).actorsActresses.join(", ")}</i>
                            }
                            {isAnime(media) &&
                                <i className='ActorsActresses'>{(media as Anime).voiceActorsActresses.join(", ")}</i>
                            }
                            <i className='Genres'>{media.genres.join(", ")}</i>
                        </div>
                        </>



.Row-1{
            @include flex-row-center-center;
            gap: 8px;

            color: $font-quaternary-color;
            font-size: $font-size-smaller;
            font-weight: 300;

            .Relevance{
                color: $primary-green;
            }
        }

        .Row-2{
            
            .Description{
                color: $font-quaternary-color;
                font-size: $font-size-small;
                font-weight: 300;
                
                @include mq-large{
                    display: -webkit-box;
                    -webkit-box-orient: vertical;
                    -webkit-line-clamp: 4;
                    overflow: hidden;
                }

                @include mq-medium{
                    display: -webkit-box;
                    -webkit-box-orient: vertical;
                    -webkit-line-clamp: 3;
                    overflow: hidden;
                }

                @include mq-small{
                    display: -webkit-box;
                    -webkit-box-orient: vertical;
                    -webkit-line-clamp: 2;
                    overflow: hidden;
                }
            }
        }

        .Row-3{

            .ActorsActresses{
                display: block;
                color: $font-quaternary-color;
                text-align: left;
                font-size: $font-size-smaller;
                font-weight: 300;
                font-family: Arial, Helvetica, sans-serif;

                @include mq-small{
                    display: none;
                }
            }

            .Genres{
                color: $font-quaternary-color;
                text-align: left;
                font-size: $font-size-smaller;
                font-weight: 300;
                font-family: Arial, Helvetica, sans-serif;
            }
        }